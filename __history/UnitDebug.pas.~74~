unit UnitDebug;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Data.DB, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, UnitGlobals,
  Vcl.StdCtrls, Vcl.DdeMan,  Vcl.ExtCtrls, frxClass, frxDBSet, frxDesgn, frxExportPDF,
  frxExportBaseDialog;

type
  TDebugForm = class(TForm)
    DBGridServices: TDBGrid;
    FDQueryServices: TFDQuery;
    DataSourceServices: TDataSource;
    Button1: TButton;
    frxReport1: TfrxReport;
    frxDBDataset1: TfrxDBDataset;
    frxDesigner1: TfrxDesigner;
    frxPDFExport1: TfrxPDFExport;
    DateTimePicker1: TDateTimePicker;
    procedure FormShow(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure LoadData(ADate: TDateTime);
    procedure DateTimePicker1Change(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  DebugForm: TDebugForm;

implementation

{$R *.dfm}

procedure TDebugForm.Button1Click(Sender: TObject);
const
  ColW = 110;
  Gap  = 10;
var
  Page: TfrxReportPage;
  Header: TfrxPageHeader;
  Band: TfrxMasterData;
  Memo: TfrxMemoView;
  FileNameFR3, FileNamePDF : string;
  i, x: Integer;
    F: TField;
begin
  if not FDQueryServices.Active then
    FDQueryServices.Open;

  frxReport1.Clear;

  FileNameFR3 := ExtractFilePath(ParamStr(0)) +
                 FormatDateTime('"HistoryReport_"yyyy-mm-dd_hh-nn-ss".fr3"', Now);
  FileNamePDF := ChangeFileExt(FileNameFR3, '.pdf');
  frxReport1.LoadFromFile(FileNameFR3);

  // привязываем датасет
  frxDBDataset1.DataSet := FDQueryServices;
  frxDBDataset1.UserName := 'HistoryDS';
  frxReport1.DataSets.Add(frxDBDataset1);

   Page := TfrxReportPage.Create(frxReport1);
  Page.CreateUniqueName;

  Header := TfrxPageHeader.Create(Page);
  Header.CreateUniqueName;
  Header.Height := 24;

  Band := TfrxMasterData.Create(Page);
  Band.CreateUniqueName;
  Band.DataSet := frxDBDataset1;
  Band.Height := 50;

  x := 50;
  for i := 0 to FDQueryServices.Fields.Count - 1 do
  begin
    F := FDQueryServices.Fields[i];

    // Заголовок
    Memo := TfrxMemoView.Create(Header);
    Memo.CreateUniqueName;
    Memo.SetBounds(x, 50, ColW, Header.Height);
    Memo.Text := F.FieldName;
    Memo.HAlign := haCenter;
    Memo.Frame.Typ := [ftLeft, ftRight, ftTop, ftBottom];
    Memo.Font.Style := [fsBold];

    // Данные
    Memo := TfrxMemoView.Create(Band);
    Memo.CreateUniqueName;
    Memo.DataSet := frxDBDataset1;
    Memo.DataField := F.FieldName;
    Memo.SetBounds(x, 50, ColW, Band.Height);
    Memo.Frame.Typ := [ftLeft, ftRight, ftTop, ftBottom];

    if F is TIntegerField then
      Memo.HAlign := haRight
    else if F is TFloatField then
    begin
      Memo.HAlign := haRight;
      Memo.DisplayFormat.FormatStr := '#,##0.00';
    end
    else if F is TDateTimeField then
      Memo.DisplayFormat.Kind := fkDateTime;

    x := x + ColW;
  end;


  // показываем результат
  if frxReport1.PrepareReport then
    begin
      frxReport1.ShowReport;

      // Дополнительно сохраняем в PDF с датой
      with frxPDFExport1.Create(nil) do
      try
        FileName := FileNamePDF;
        ShowDialog := False;
        OpenAfterExport := True;
        frxReport1.Export(frxPDFExport1);
        ShowMessage('Звіт збережено в PDF: ' + FileNamePDF);
      finally
        Free;
      end;
    end;
end;

procedure TDebugForm.FormShow(Sender: TObject);
begin
  // Устанавливаем соединение
  FDQueryServices.Connection := FDConnectionGlobal;

  // ставим текущую дату в DateTimePicker
  DateTimePicker1.Date := Date;

  // сразу загружаем данные за сегодня
  LoadData(DateTimePicker1.Date);
end;

procedure TDebugForm.DateTimePicker1Change(Sender: TObject);
begin
  LoadData(DateTimePicker1.Date);
end;

procedure TDebugForm.LoadData(ADate: TDateTime);
begin
  FDQueryServices.Close;
  FDQueryServices.SQL.Text :=
    'SELECT ' +
    '  rh.REQUESTHISTORY_ID AS "Історія №", ' +
    '  s.NAME AS "Сервіс", ' +
    '  u_requester.USERNAME AS "Запитувач", ' +
    '  u_changer.USERNAME AS "Хто змінив", ' +
    '  st.NAME AS "Статус", ' +
    '  TO_CHAR(rh.DATE_CHANGE, ''DD.MM.YYYY HH24:MI:SS'') AS "Час зміни" ' +
    'FROM ' +
    '  REQUEST_HISTORY rh ' +
    '  JOIN ACCESS_REQUESTS ar ON rh.REQUEST_ID = ar.ACCESSREQUEST_ID ' +
    '  JOIN USERS u_requester ON ar.REQUESTER_ID = u_requester.USER_ID ' +
    '  JOIN USERS u_changer ON rh.USERCHANGER_ID = u_changer.USER_ID ' +
    '  JOIN SERVICES s ON ar.SERVICE_ID = s.SERVICE_ID ' +
    '  JOIN REQUEST_STATUSES st ON rh.STATUS_ID = st.REQUESTSTATUS_ID ' +
    'WHERE TRUNC(rh.DATE_CHANGE) = :p_date ' +
    'ORDER BY rh.DATE_CHANGE DESC';

  FDQueryServices.ParamByName('p_date').AsDate := ADate;
  FDQueryServices.Open;

  DataSourceServices.DataSet := FDQueryServices;

  if DBGridServices.Columns.Count > 0 then
  begin
    DBGridServices.Columns[0].Width := 0;
    DBGridServices.Columns[1].Width := 80;
    DBGridServices.Columns[2].Width := 80;
    DBGridServices.Columns[3].Width := 80;
    DBGridServices.Columns[4].Width := 80;
    DBGridServices.Columns[5].Width := 80;
  end;
end;


end.
