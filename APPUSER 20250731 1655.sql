--
-- Script was generated by Devart dbForge Studio 2024 for Oracle, Version 4.6.15.0
-- Product home page: http://www.devart.com/dbforge/oracle/studio
-- Script date 7/31/2025 4:55:49 PM
-- Server version: Oracle Database 23ai Free Release 23.0.0.0.0 - Develop, Learn, and Run for Free Version 23.7.0.25.01
-- Client version: 
--


CONNECT appuser@127.0.0.1:1521/FREEPDB1;

-- 
-- Set default schema
--
ALTER SESSION SET CURRENT_SCHEMA = "APPUSER";

SET SQLBLANKLINES ON;
SET DEFINE OFF;
ALTER SESSION SET NLS_DATE_FORMAT = 'MM/DD/SYYYY HH24:MI:SS';
ALTER SESSION SET NLS_TIMESTAMP_TZ_FORMAT = 'MM/DD/SYYYY HH24:MI:SS.FF TZH:TZM';
ALTER SESSION SET NLS_TIMESTAMP_FORMAT = 'MM/DD/SYYYY HH24:MI:SS.FF';
ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '.,';
ALTER SESSION SET NLS_NCHAR_CONV_EXCP = FALSE;
ALTER SESSION SET TIME_ZONE = '+03:00';

--
-- Drop package "SET_REQUEST_CTX"
--
DROP PACKAGE SET_REQUEST_CTX;

--
-- Drop table "REQUEST_HISTORY"
--
DROP TABLE REQUEST_HISTORY;

--
-- Drop table "ACCESS_REQUESTS"
--
DROP TABLE ACCESS_REQUESTS;

--
-- Drop table "REQUEST_STATUSES"
--
DROP TABLE REQUEST_STATUSES;

--
-- Drop table "USER_SERVICE_ROLES"
--
DROP TABLE USER_SERVICE_ROLES;

--
-- Drop table "SERVICES"
--
DROP TABLE SERVICES;

--
-- Drop table "USERS"
--
DROP TABLE USERS;

--
-- Drop table "ROLES"
--
DROP TABLE ROLES;

--
-- Drop table "EMPLOYEES"
--
DROP TABLE EMPLOYEES;

--
-- Drop table "POSITIONS"
--
DROP TABLE POSITIONS;

--
-- Drop table "DEPARTMENTS"
--
DROP TABLE DEPARTMENTS;

--
-- Drop sequence "USER_SERVICE_ROLES_SEQ"
--
DROP SEQUENCE USER_SERVICE_ROLES_SEQ;

--
-- Drop sequence "REQUEST_HISTORY_SEQ"
--
DROP SEQUENCE REQUEST_HISTORY_SEQ;

--
-- Drop sequence "ACCESSREQUEST_SEQ"
--
DROP SEQUENCE ACCESSREQUEST_SEQ;

--
-- Create sequence "ACCESSREQUEST_SEQ"
--
CREATE SEQUENCE ACCESSREQUEST_SEQ
START WITH 21
INCREMENT BY 1
NOCACHE;

--
-- Create sequence "REQUEST_HISTORY_SEQ"
--
CREATE SEQUENCE REQUEST_HISTORY_SEQ
START WITH 101
INCREMENT BY 1;

--
-- Create sequence "USER_SERVICE_ROLES_SEQ"
--
CREATE SEQUENCE USER_SERVICE_ROLES_SEQ
START WITH 101
INCREMENT BY 1;

--
-- Create table "DEPARTMENTS"
--
CREATE TABLE DEPARTMENTS (
  DEPARTMENT_ID NUMBER,
  NAME          NVARCHAR2(100),
  PRIMARY KEY (DEPARTMENT_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                                    NEXT 1 M
                                                                    MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create table "POSITIONS"
--
CREATE TABLE POSITIONS (
  POSITION_ID   NUMBER,
  NAME          NVARCHAR2(100),
  DEPARTMENT_ID NUMBER,
  PRIMARY KEY (POSITION_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                                  NEXT 1 M
                                                                  MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create foreign key on table "POSITIONS"
--
ALTER TABLE POSITIONS
ADD FOREIGN KEY (DEPARTMENT_ID)
REFERENCES DEPARTMENTS (DEPARTMENT_ID);

--
-- Create table "EMPLOYEES"
--
CREATE TABLE EMPLOYEES (
  EMPLOYEE_ID NUMBER,
  FULL_NAME   NVARCHAR2(100),
  POSITION_ID NUMBER,
  PRIMARY KEY (EMPLOYEE_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                                  NEXT 1 M
                                                                  MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create foreign key on table "EMPLOYEES"
--
ALTER TABLE EMPLOYEES
ADD FOREIGN KEY (POSITION_ID)
REFERENCES POSITIONS (POSITION_ID);

--
-- Create table "ROLES"
--
CREATE TABLE ROLES (
  ROLE_ID NUMBER,
  NAME    NVARCHAR2(50),
  PRIMARY KEY (ROLE_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                              NEXT 1 M
                                                              MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create table "USERS"
--
CREATE TABLE USERS (
  USER_ID     NUMBER,
  EMPLOYEE_ID NUMBER,
  USERNAME    NVARCHAR2(50),
  EMAIL       NVARCHAR2(100),
  ROLE_ID     NUMBER DEFAULT 3,
  PRIMARY KEY (USER_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                              NEXT 1 M
                                                              MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create foreign key "FK_USERS_ROLES_ROLE_ID" on table "USERS"
--
ALTER TABLE USERS
ADD CONSTRAINT FK_USERS_ROLES_ROLE_ID FOREIGN KEY (ROLE_ID)
REFERENCES ROLES (ROLE_ID);

--
-- Create foreign key on table "USERS"
--
ALTER TABLE USERS
ADD FOREIGN KEY (EMPLOYEE_ID)
REFERENCES EMPLOYEES (EMPLOYEE_ID);

--
-- Create table "SERVICES"
--
CREATE TABLE SERVICES (
  SERVICE_ID  NUMBER,
  NAME        NVARCHAR2(100),
  DESCRIPTION NVARCHAR2(200),
  PRIMARY KEY (SERVICE_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                                 NEXT 1 M
                                                                 MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create table "USER_SERVICE_ROLES"
--
CREATE TABLE USER_SERVICE_ROLES (
  USERSERVICEROLE_ID NUMBER,
  USER_ID            NUMBER,
  SERVICE_ID         NUMBER,
  ROLE_ID            NUMBER,
  PRIMARY KEY (USERSERVICEROLE_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                                         NEXT 1 M
                                                                         MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create foreign key on table "USER_SERVICE_ROLES"
--
ALTER TABLE USER_SERVICE_ROLES
ADD FOREIGN KEY (USER_ID)
REFERENCES USERS (USER_ID);

--
-- Create foreign key on table "USER_SERVICE_ROLES"
--
ALTER TABLE USER_SERVICE_ROLES
ADD FOREIGN KEY (SERVICE_ID)
REFERENCES SERVICES (SERVICE_ID);

--
-- Create foreign key on table "USER_SERVICE_ROLES"
--
ALTER TABLE USER_SERVICE_ROLES
ADD FOREIGN KEY (ROLE_ID)
REFERENCES ROLES (ROLE_ID);

--
-- Create table "REQUEST_STATUSES"
--
CREATE TABLE REQUEST_STATUSES (
  REQUESTSTATUS_ID NUMBER,
  NAME             NVARCHAR2(100),
  PRIMARY KEY (REQUESTSTATUS_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                                       NEXT 1 M
                                                                       MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create table "ACCESS_REQUESTS"
--
CREATE TABLE ACCESS_REQUESTS (
  ACCESSREQUEST_ID NUMBER,
  REQUESTER_ID     NUMBER,
  SERVICE_ID       NUMBER,
  ROLE_ID          NUMBER,
  STATUS_ID        NUMBER,
  CREATED_AT       DATE DEFAULT SYSDATE,
  UPDATED_AT       DATE DEFAULT SYSDATE,
  PRIMARY KEY (ACCESSREQUEST_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                                       NEXT 1 M
                                                                       MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create foreign key on table "ACCESS_REQUESTS"
--
ALTER TABLE ACCESS_REQUESTS
ADD FOREIGN KEY (REQUESTER_ID)
REFERENCES USERS (USER_ID);

--
-- Create foreign key on table "ACCESS_REQUESTS"
--
ALTER TABLE ACCESS_REQUESTS
ADD FOREIGN KEY (SERVICE_ID)
REFERENCES SERVICES (SERVICE_ID);

--
-- Create foreign key on table "ACCESS_REQUESTS"
--
ALTER TABLE ACCESS_REQUESTS
ADD FOREIGN KEY (ROLE_ID)
REFERENCES ROLES (ROLE_ID);

--
-- Create foreign key on table "ACCESS_REQUESTS"
--
ALTER TABLE ACCESS_REQUESTS
ADD FOREIGN KEY (STATUS_ID)
REFERENCES REQUEST_STATUSES (REQUESTSTATUS_ID);

--
-- Create table "REQUEST_HISTORY"
--
CREATE TABLE REQUEST_HISTORY (
  REQUESTHISTORY_ID NUMBER,
  REQUEST_ID        NUMBER,
  DATE_CHANGE       DATE DEFAULT SYSDATE,
  USERCHANGER_ID    NUMBER,
  STATUS_ID         NUMBER,
  PRIMARY KEY (REQUESTHISTORY_ID) USING INDEX TABLESPACE USERS STORAGE (INITIAL 64 K
                                                                        NEXT 1 M
                                                                        MAXEXTENTS UNLIMITED)
)
TABLESPACE USERS
STORAGE (INITIAL 64 K
         NEXT 1 M
         MAXEXTENTS UNLIMITED)
LOGGING;

--
-- Create foreign key on table "REQUEST_HISTORY"
--
ALTER TABLE REQUEST_HISTORY
ADD FOREIGN KEY (REQUEST_ID)
REFERENCES ACCESS_REQUESTS (ACCESSREQUEST_ID);

--
-- Create foreign key on table "REQUEST_HISTORY"
--
ALTER TABLE REQUEST_HISTORY
ADD FOREIGN KEY (USERCHANGER_ID)
REFERENCES USERS (USER_ID);

--
-- Create foreign key on table "REQUEST_HISTORY"
--
ALTER TABLE REQUEST_HISTORY
ADD FOREIGN KEY (STATUS_ID)
REFERENCES REQUEST_STATUSES (REQUESTSTATUS_ID);

--
-- Create package "SET_REQUEST_CTX"
--
-- SET_REQUEST_CTX specification
CREATE PACKAGE set_request_ctx
  AS
  PROCEDURE set_user(p_user_id NUMBER);
END;
/
-- SET_REQUEST_CTX body

CREATE PACKAGE BODY set_request_ctx
  AS
  PROCEDURE set_user(p_user_id NUMBER)
    IS
    BEGIN
      DBMS_SESSION.SET_CONTEXT('user_ctx', 'user_id', p_user_id);
    END;
END;
/

COMMIT;


-- 
-- Dumping data for table DEPARTMENTS
--
INSERT INTO DEPARTMENTS VALUES
(1, N'Реакторний цех');
INSERT INTO DEPARTMENTS VALUES
(2, N'Електроцех');
INSERT INTO DEPARTMENTS VALUES
(3, N'Відділ безпеки');
INSERT INTO DEPARTMENTS VALUES
(4, N'Цех хімводоочистки');
INSERT INTO DEPARTMENTS VALUES
(5, N'Цех вентиляції та кондиціювання');
INSERT INTO DEPARTMENTS VALUES
(6, N'Лабораторія радіаційного контролю');

-- 
-- Dumping data for table POSITIONS
--
INSERT INTO POSITIONS VALUES
(1, N'Оператор реактора', 1);
INSERT INTO POSITIONS VALUES
(2, N'Інженер-електрик', 2);
INSERT INTO POSITIONS VALUES
(3, N'Фахівець з кібербезпеки', 3);
INSERT INTO POSITIONS VALUES
(4, N'Інженер з хімводоочистки', 4);
INSERT INTO POSITIONS VALUES
(5, N'Технік з вентиляції', 5);
INSERT INTO POSITIONS VALUES
(6, N'Радіологічний аналітик', 6);
INSERT INTO POSITIONS VALUES
(7, N'Контролер радіаційного фону', 6);
INSERT INTO POSITIONS VALUES
(8, N'Майстер зміни вентиляційної системи', 5);

-- 
-- Dumping data for table EMPLOYEES
--
INSERT INTO EMPLOYEES VALUES
(1, N'Іванов Іван Іванович', 1);
INSERT INTO EMPLOYEES VALUES
(2, N'Петров Петро Петрович', 2);
INSERT INTO EMPLOYEES VALUES
(3, N'Сидорова Анна Сергіївна', 3);
INSERT INTO EMPLOYEES VALUES
(4, N'Ковальчук Андрій Сергійович', 1);
INSERT INTO EMPLOYEES VALUES
(5, N'Литвиненко Олександр Петрович', 2);
INSERT INTO EMPLOYEES VALUES
(6, N'Мельник Ірина Вікторівна', 3);
INSERT INTO EMPLOYEES VALUES
(7, N'Гуменюк Тетяна Миколаївна', 3);
INSERT INTO EMPLOYEES VALUES
(8, N'Шевченко Богдан Дмитрович', 2);

-- 
-- Dumping data for table ROLES
--
INSERT INTO ROLES VALUES
(1, N'Адмін');
INSERT INTO ROLES VALUES
(2, N'Власник');
INSERT INTO ROLES VALUES
(3, N'Користувач');

-- 
-- Dumping data for table SERVICES
--
INSERT INTO SERVICES VALUES
(1, N'Система контролю реактора', N'Автоматизована система керування реактором та контролю параметрів безпеки.');
INSERT INTO SERVICES VALUES
(2, N'Енергопостачання', N'Контроль, моніторинг та розподіл енергопостачання в межах атомної станції.');
INSERT INTO SERVICES VALUES
(3, N'Система відеоспостереження', N'Система відеоспостереження для забезпечення фізичної безпеки об''єкта.');
INSERT INTO SERVICES VALUES
(4, N'Система управління вентиляцією', N'Автоматизоване керування вентиляційними системами в реакторному залі');
INSERT INTO SERVICES VALUES
(5, N'Моніторинг радіаційного фону', N'Збір та аналіз даних про рівень радіації на території АЕС');
INSERT INTO SERVICES VALUES
(6, N'Система очищення води', N'Контроль та управління процесом хімічної очистки технічної води');
INSERT INTO SERVICES VALUES
(7, N'Система обліку персоналу', N'Облік робочого часу та присутності працівників на зміні');

-- 
-- Dumping data for table REQUEST_STATUSES
--
INSERT INTO REQUEST_STATUSES VALUES
(1, N'Запит відправлено');
INSERT INTO REQUEST_STATUSES VALUES
(2, N'Схвалено власником');
INSERT INTO REQUEST_STATUSES VALUES
(3, N'Відхилено власником');
INSERT INTO REQUEST_STATUSES VALUES
(4, N'Схвалено адміном');
INSERT INTO REQUEST_STATUSES VALUES
(5, N'Відхилено адміном');

-- 
-- Dumping data for table USERS
--
INSERT INTO USERS VALUES
(1, 1, N'ivanov', N'ivanov@npp.ua', NULL);
INSERT INTO USERS VALUES
(2, 2, N'petrov', N'petrov@npp.ua', NULL);
INSERT INTO USERS VALUES
(3, 3, N'sidorova', N'sidorova@npp.ua', NULL);
INSERT INTO USERS VALUES
(4, 1, N'ADMIN', NULL, 1);
INSERT INTO USERS VALUES
(9, 4, N'kovalchuk', N'kovalchuk@npp.ua', NULL);
INSERT INTO USERS VALUES
(5, 5, N'lytvynenko', N'lytvynenko@npp.ua', NULL);
INSERT INTO USERS VALUES
(6, 6, N'melnyk', N'melnyk@npp.ua', NULL);
INSERT INTO USERS VALUES
(7, 7, N'humeniuk', N'humeniuk@npp.ua', NULL);
INSERT INTO USERS VALUES
(8, 8, N'shevchenko', N'shevchenko@npp.ua', NULL);

-- 
-- Dumping data for table ACCESS_REQUESTS
--
INSERT INTO ACCESS_REQUESTS VALUES
(19, 8, 2, 3, 4, '07/31/2025 11:05:53', '07/31/2025 11:05:53');
INSERT INTO ACCESS_REQUESTS VALUES
(20, 2, 1, 3, 4, '07/31/2025 11:07:48', '07/31/2025 11:07:48');

-- 
-- Dumping data for table USER_SERVICE_ROLES
--
INSERT INTO USER_SERVICE_ROLES VALUES
(81, 2, 2, 1);
INSERT INTO USER_SERVICE_ROLES VALUES
(82, 1, 2, 2);
INSERT INTO USER_SERVICE_ROLES VALUES
(83, 3, 2, 2);
INSERT INTO USER_SERVICE_ROLES VALUES
(84, 8, 2, 3);
INSERT INTO USER_SERVICE_ROLES VALUES
(85, 9, 1, 1);
INSERT INTO USER_SERVICE_ROLES VALUES
(86, 5, 1, 2);
INSERT INTO USER_SERVICE_ROLES VALUES
(87, 2, 1, 3);

-- 
-- Dumping data for table REQUEST_HISTORY
--
INSERT INTO REQUEST_HISTORY VALUES
(93, 19, '07/31/2025 11:05:53', 8, 1);
INSERT INTO REQUEST_HISTORY VALUES
(94, 19, '07/31/2025 11:06:13', 3, 2);
INSERT INTO REQUEST_HISTORY VALUES
(95, 19, '07/31/2025 11:06:25', 2, 4);
INSERT INTO REQUEST_HISTORY VALUES
(96, 20, '07/31/2025 11:07:48', 2, 1);
INSERT INTO REQUEST_HISTORY VALUES
(97, 20, '07/31/2025 11:08:05', 5, 2);
INSERT INTO REQUEST_HISTORY VALUES
(98, 20, '07/31/2025 11:08:18', 9, 4);

COMMIT;


--
-- Drop trigger "TRG_ACCESSREQUESTS_BI"
--
DROP TRIGGER TRG_ACCESSREQUESTS_BI;

--
-- Drop trigger "TRG_ACCESSREQ_LOG_INSERT"
--
DROP TRIGGER TRG_ACCESSREQ_LOG_INSERT;

--
-- Drop trigger "TRG_AFTER_ACCESS_GRANTED"
--
DROP TRIGGER TRG_AFTER_ACCESS_GRANTED;

--
-- Drop trigger "TRG_STATUS_CHANGE_HISTORY"
--
DROP TRIGGER TRG_STATUS_CHANGE_HISTORY;

--
-- Drop trigger "TRG_USR_ROLE_ID"
--
DROP TRIGGER TRG_USR_ROLE_ID;

--
-- Create trigger "TRG_USR_ROLE_ID"
--
CREATE TRIGGER TRG_USR_ROLE_ID
  BEFORE INSERT
  ON USER_SERVICE_ROLES
  FOR EACH ROW
BEGIN
  IF :NEW.USERSERVICEROLE_ID IS NULL
  THEN
    SELECT USER_SERVICE_ROLES_SEQ.NEXTVAL
      INTO :NEW.USERSERVICEROLE_ID
      FROM dual;
  END IF;
END;
/

--
-- Create trigger "TRG_STATUS_CHANGE_HISTORY"
--
CREATE TRIGGER TRG_STATUS_CHANGE_HISTORY
  AFTER UPDATE OF STATUS_ID
  ON ACCESS_REQUESTS
  FOR EACH ROW
BEGIN
  INSERT INTO REQUEST_HISTORY (
    REQUESTHISTORY_ID, REQUEST_ID, STATUS_ID, DATE_CHANGE, USERCHANGER_ID
  )
  VALUES (REQUEST_HISTORY_SEQ.NEXTVAL, :NEW.ACCESSREQUEST_ID, :NEW.STATUS_ID, SYSDATE, TO_NUMBER(SYS_CONTEXT('user_ctx', 'user_id')));
END;
/

--
-- Create trigger "TRG_AFTER_ACCESS_GRANTED"
--
CREATE TRIGGER TRG_AFTER_ACCESS_GRANTED
  AFTER UPDATE
  ON ACCESS_REQUESTS
  FOR EACH ROW
  WHEN (NEW.STATUS_ID = 4 AND OLD.STATUS_ID != 4)
BEGIN
  INSERT INTO USER_SERVICE_ROLES (
    USER_ID, SERVICE_ID, ROLE_ID
  )
  SELECT :NEW.REQUESTER_ID,
         :NEW.SERVICE_ID,
         :NEW.ROLE_ID
    FROM DUAL
    WHERE NOT EXISTS (SELECT 1
          FROM USER_SERVICE_ROLES
          WHERE USER_ID = :NEW.REQUESTER_ID
            AND SERVICE_ID = :NEW.SERVICE_ID
            AND ROLE_ID = :NEW.ROLE_ID);
END;
/

--
-- Create trigger "TRG_ACCESSREQ_LOG_INSERT"
--
CREATE TRIGGER TRG_ACCESSREQ_LOG_INSERT
  AFTER INSERT
  ON ACCESS_REQUESTS
  FOR EACH ROW
BEGIN
  INSERT INTO REQUEST_HISTORY (
    REQUESTHISTORY_ID, REQUEST_ID, DATE_CHANGE, USERCHANGER_ID, STATUS_ID
  )
  VALUES (REQUEST_HISTORY_SEQ.NEXTVAL, :NEW.ACCESSREQUEST_ID, SYSDATE, :NEW.REQUESTER_ID, :NEW.STATUS_ID);
END;
/

--
-- Create trigger "TRG_ACCESSREQUESTS_BI"
--
CREATE TRIGGER TRG_ACCESSREQUESTS_BI
  BEFORE INSERT
  ON ACCESS_REQUESTS
  FOR EACH ROW
BEGIN
  IF :NEW.ACCESSREQUEST_ID IS NULL
  THEN
    :NEW.ACCESSREQUEST_ID := ACCESSREQUEST_SEQ.NEXTVAL;
  END IF;
END;
/

COMMIT;

-- 
-- Set default schema
--
DECLARE
  p VARCHAR2(255);
BEGIN 
  SELECT USER INTO p FROM DUAL;
  EXECUTE IMMEDIATE 'ALTER SESSION SET CURRENT_SCHEMA = ' || p;
END;
/